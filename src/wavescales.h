////////////////////////////////////////////////////////////////////////////////
// (c) 2014 Rolf Meyerhoff. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
///\file    wavescales.h
///\ingroup bruo
///\brief   Wave view peak scale widget definition.
///\author  Rolf Meyerhoff (badlantic@gmail.com)
///\version 1.0
/// This file is part of the bruo audio editor.
////////////////////////////////////////////////////////////////////////////////
///\par License:
/// This program is free software: you can redistribute it and/or modify it
/// under the terms of the GNU General Public License as published by the Free
/// Software Foundation, either version 2 of the License, or (at your option)
/// any later version.
///\par
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even  the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
/// more details.
///\par
/// You should have received a copy of the GNU General Public License along with
/// this program; see the file COPYING. If not, see http://www.gnu.org/licenses/
/// or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
/// Floor, Boston, MA 02110-1301, USA.
////////////////////////////////////////////////////////////////////////////////
#ifndef __WAVESCALES_H_INCLUDED__
#define __WAVESCALES_H_INCLUDED__

#include "bruo.h"

////////////////////////////////////////////////////////////////////////////////
///\class   WaveScales wavescales.h
///\brief   The peak scale meter next to the wave editor.
///\remarks This widget will only work reliable when it is placed left to the
///         wave editor and when it has exactly the same height.
////////////////////////////////////////////////////////////////////////////////
class WaveScales :
  public QWidget
{
  Q_OBJECT // Qt magic...

public:

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::WaveScales()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Initialization constructor of this class.
  ///\param   [in] editWindow: The master wave editor.
  ///\param   [in] parent:     Parent for this instance.
  ///\remarks Attaches itself to the master so it is synced automatically.
  //////////////////////////////////////////////////////////////////////////////
  WaveScales(class WaveEditView* editWindow, QWidget* parent);

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::~WaveScales()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Destructor of this widget.
  ///\remarks Does final cleanup.
  //////////////////////////////////////////////////////////////////////////////
  virtual ~WaveScales();

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::backColor()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Access the background color of this widget.
  ///\return  The background color of this widget.
  //////////////////////////////////////////////////////////////////////////////
  const QColor& backColor() const;

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::setBackColor()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Set a new background color for this widget.
  ///\param   [in] newColor: The new background color of this widget.
  //////////////////////////////////////////////////////////////////////////////
  void setBackColor(const QColor& newColor);

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::foreColor()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Access the foreground color of this widget.
  ///\return  The foreground color of this widget.
  ///\remarks This color is used for the lines and text.
  //////////////////////////////////////////////////////////////////////////////
  const QColor& foreColor() const;

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::setForeColor()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Set a new foreground color for this widget.
  ///\param   [in] newColor: The new foreground color of this widget.
  ///\remarks This color is used for the lines and text.
  //////////////////////////////////////////////////////////////////////////////
  void setForeColor(const QColor& newColor);

protected:

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::paintEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the paint event.
  ///\param   [in] e: Details of the event.
  ///\remarks This widget uses double buffering so this function does a buffer
  ///         swap. The actual drawing is done with redraw().
  //////////////////////////////////////////////////////////////////////////////
  virtual void paintEvent(QPaintEvent* event);

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::resizeEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the resize event.
  ///\param   [in] e: Details of the event.
  ///\remarks Updates the back buffer.
  //////////////////////////////////////////////////////////////////////////////
  virtual void resizeEvent(QResizeEvent* event);

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::wheelEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the paint event.
  ///\param   [in] e: Details of the event.
  ///\remarks Scrolls the view up and down.
  //////////////////////////////////////////////////////////////////////////////
  virtual void wheelEvent(QWheelEvent* event);

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::mouseMoveEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the mouse move event.
  ///\param   [in] e: Details of the event.
  ///\remarks This widget doesn't use mouse tracking so this is only called when
  ///         a button is pressed.
  //////////////////////////////////////////////////////////////////////////////
  virtual void mouseMoveEvent(QMouseEvent* event);

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::mousePressEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the mouse button press event.
  ///\param   [in] e: Details of the event.
  //////////////////////////////////////////////////////////////////////////////
  virtual void mousePressEvent(QMouseEvent* event);

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::mouseReleaseEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the mouse button release event.
  ///\param   [in] e: Details of the event.
  //////////////////////////////////////////////////////////////////////////////
  virtual void mouseReleaseEvent(QMouseEvent* event);

private slots:

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::masterViewportChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the master viewport changed event.
  ///\remarks Updates the ruler.
  //////////////////////////////////////////////////////////////////////////////
  void masterViewportChanged();

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::scaleFormatChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the scale format changed event.
  ///\remarks Updates the ruler.
  //////////////////////////////////////////////////////////////////////////////
  void scaleFormatChanged();

private:

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::redraw()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Force a redraw of the scales.
  ///\remarks Redraws the scales and invalidates the widget.
  //////////////////////////////////////////////////////////////////////////////
  void redraw();

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::drawScales()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   The actual scale drawing function.
  ///\param   [in] painter: The painter to use.
  //////////////////////////////////////////////////////////////////////////////
  void drawScales(QPainter& painter);

  //////////////////////////////////////////////////////////////////////////////
  // WaveScales::showContextMenu()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Show this widget's context menu.
  ///\param   [in] pos: Position in client coordinates of the context menu.
  //////////////////////////////////////////////////////////////////////////////
  void showContextMenu(const QPoint& pos);

  //////////////////////////////////////////////////////////////////////////////
  // Member:
  class WaveEditView* m_master;       ///> The master edit control.
  QColor              m_backColor;    ///> Background color.
  QColor              m_foreColor;    ///> Foreground color.
  QPixmap*            m_backBuff;     ///> Graphics back buffer.
  QPoint              m_lastMousePos; ///> Position of the last mouse move.
  QPoint              m_mouseDownPos; ///> Mouse down position.
  bool                m_dragStarted;  ///> Startet dragging the mouse?
  double              m_oldZoom;      ///> Cached zoom value.
  double              m_oldPos;       ///> Cached position.
};

#endif // #ifndef __WAVESCALES_H_INCLUDED__
///////////////////////////////// End of File //////////////////////////////////
