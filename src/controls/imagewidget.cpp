////////////////////////////////////////////////////////////////////////////////
// (c) 2014 Rolf Meyerhoff. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
///\file    imagewidget.cpp
///\ingroup bruo
///\brief   Image based widget implementation.
///\author  Rolf Meyerhoff (rm@matrix44.de)
///\version 1.0
/// This file is part of the bruo audio editor.
////////////////////////////////////////////////////////////////////////////////
///\par License:
/// This program is free software: you can redistribute it and/or modify it
/// under the terms of the GNU General Public License as published by the Free
/// Software Foundation, either version 2 of the License, or (at your option)
/// any later version.
///\par
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even  the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
/// more details.
///\par
/// You should have received a copy of the GNU General Public License along with
/// this program; see the file COPYING. If not, see http://www.gnu.org/licenses/
/// or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
/// Floor, Boston, MA 02110-1301, USA.
////////////////////////////////////////////////////////////////////////////////
#include "imagewidget.h"

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::ImageWidget()
////////////////////////////////////////////////////////////////////////////////
///\brief   Default constructor of this widget.
///\param   [in] parent: Parent window for this widget.
///\remarks Just initializes the members.
////////////////////////////////////////////////////////////////////////////////
ImageWidget::ImageWidget(QWidget* parent) :
  QWidget(parent)
{
  // Optimize performance:
  setAttribute(Qt::WA_OpaquePaintEvent, true);
  setAttribute(Qt::WA_NoSystemBackground, true);
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::~ImageWidget()
////////////////////////////////////////////////////////////////////////////////
///\brief   Destructor of this window.
///\remarks Cleans up used resources.
////////////////////////////////////////////////////////////////////////////////
ImageWidget::~ImageWidget()
{
  // Nothing to do here.
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::image()
////////////////////////////////////////////////////////////////////////////////
///\brief   Get accessor for the Image property.
///\return  The current image.
///\remarks This image is the source for the widget.
////////////////////////////////////////////////////////////////////////////////
const QPixmap& ImageWidget::image() const
{
  // Return our image:
  return m_image;
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::setImage()
////////////////////////////////////////////////////////////////////////////////
///\brief   Set accessor for the Image property.
///\param   [in] newImage: The new image.
///\remarks This image is the source for the widget.
////////////////////////////////////////////////////////////////////////////////
void ImageWidget::setImage(const QPixmap& newImage)
{
  // Set new image:
  m_image = newImage;

  // Force redraw:
  update();
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::disabledImage()
////////////////////////////////////////////////////////////////////////////////
///\brief   Get accessor for the DisabledImage property.
///\return  The current disabled state image.
///\remarks This image is shown when the widget is disabled. It should have
///         the same size as one frame of the knob movie image.
////////////////////////////////////////////////////////////////////////////////
const QPixmap& ImageWidget::disabledImage() const
{
  // Return our image:
  return m_disabledImage;
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::setDisabledImage()
////////////////////////////////////////////////////////////////////////////////
///\brief   Set accessor for the DisabledImage property.
///\param   [in] newImage: The new image.
///\remarks This image is shown when the widget is disabled. It should have
///         the same size as one frame of the knob movie image.
////////////////////////////////////////////////////////////////////////////////
void ImageWidget::setDisabledImage(const QPixmap& newImage)
{
  // Set new image:
  m_disabledImage = newImage;

  // Force redraw:
  update();
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::tag()
////////////////////////////////////////////////////////////////////////////////
///\brief   Get accessor for the Tag property.
///\return  The currently stored user value.
///\remarks This tag is an arbitrary user defined value.
////////////////////////////////////////////////////////////////////////////////
int ImageWidget::tag() const
{
  // Return current tag:
  return m_tag;
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::setTag()
////////////////////////////////////////////////////////////////////////////////
///\brief   Set accessor for the Tag property.
///\param   [in] newTag: The new user defined value.
///\remarks This tag is an arbitrary user defined value.
////////////////////////////////////////////////////////////////////////////////
void ImageWidget::setTag(const int newTag)
{
  // Set new tag:
  m_tag = newTag;
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::paintEvent()
////////////////////////////////////////////////////////////////////////////////
///\brief   Handler for the paint signal.
///\param   [in] event: Provides further details about the event.
////////////////////////////////////////////////////////////////////////////////
void ImageWidget::paintEvent(QPaintEvent* event)
{
  // Do we have a movie?
  if (image().isNull())
  {
    // Let the base class do the painting:
    QWidget::paintEvent(event);
    return;
  }

  // Draw the movie:
  QPainter qp(this);
  drawWidget(qp);
}

////////////////////////////////////////////////////////////////////////////////
// ImageWidget::changeEvent()
////////////////////////////////////////////////////////////////////////////////
///\brief   Handler for general state change signals.
///\param   [in] event: Provides further details about the event.
////////////////////////////////////////////////////////////////////////////////
void ImageWidget::changeEvent(QEvent* event)
{
  // Base handling:
  QWidget::changeEvent(event);

  // Redraw if the enabled state changed:
  if (event->type() == QEvent::EnabledChange)
    update();
}

///////////////////////////////// End of File //////////////////////////////////

