////////////////////////////////////////////////////////////////////////////////
// (c) 2013 Rolf Meyerhoff. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
///\file    bookmarkwidget.h
///\ingroup bruo
///\brief   Bookmark edit control definition.
///\author  Rolf Meyerhoff (badlantic@gmail.com)
///\version 1.0
/// This file is part of the bruo audio editor.
////////////////////////////////////////////////////////////////////////////////
///\par License:
/// This program is free software: you can redistribute it and/or modify it
/// under the terms of the GNU General Public License as published by the Free
/// Software Foundation, either version 2 of the License, or (at your option)
/// any later version.
///\par
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even  the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
/// more details.
///\par
/// You should have received a copy of the GNU General Public License along with
/// this program; see the file COPYING. If not, see http://www.gnu.org/licenses/
/// or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
/// Floor, Boston, MA 02110-1301, USA.
////////////////////////////////////////////////////////////////////////////////
#ifndef __BOOKMARKWIDGET_H_INCLUDED__
#define __BOOKMARKWIDGET_H_INCLUDED__

#include <QListWidget>

////////////////////////////////////////////////////////////////////////////////
///\class BookmarkWidget bookmarkwidget.h
///\brief A small QListWidget variation that allows editing of file bookmarks.
////////////////////////////////////////////////////////////////////////////////
class BookmarkWidget :
  public QListWidget
{
  Q_OBJECT // Qt magic...

public:

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::BookmarkWidget()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Initialization constructor of this window.
  ///\param   [in] parent: Parent window for this window.
  ///\remarks Basically initializes the entire gui.
  //////////////////////////////////////////////////////////////////////////////
  explicit BookmarkWidget(QWidget* parent = 0);

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::~BookmarkWidget()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Destructor of this window.
  ///\remarks Cleans up used resources.
  //////////////////////////////////////////////////////////////////////////////
  virtual ~BookmarkWidget();

signals:

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::bookmarkSelected()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief This signal is emitted when a bookmarks was selected.
  ///\param [in] path: Path of the selected bookmark.
  //////////////////////////////////////////////////////////////////////////////
  void bookmarkSelected(const QString& path);

protected:

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::keyPressEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Reimplemented keypress event handler.
  ///\param [in] event: Provides details about the event.
  //////////////////////////////////////////////////////////////////////////////
  virtual void keyPressEvent(QKeyEvent* event);

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::selectionChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Reimplemented selection changed event handler.
  ///\param [in] selected:   Currently selected item.
  ///\param [in] deselected: Previously selected item.
  //////////////////////////////////////////////////////////////////////////////
  virtual void selectionChanged(const QItemSelection& selected, const QItemSelection& deselected);

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::dragEnterEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Reimplemented drag enter event handler.
  ///\param [in] event: Provides details about the event.
  //////////////////////////////////////////////////////////////////////////////
  virtual void dragEnterEvent(QDragEnterEvent* event);

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::dropEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Reimplemented drop event handler.
  ///\param [in] event: Provides details about the event.
  //////////////////////////////////////////////////////////////////////////////
  virtual void dropEvent(QDropEvent* event);

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::contextMenuEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Reimplemented context menu event handler.
  ///\param [in] event: Provides details about the event.
  //////////////////////////////////////////////////////////////////////////////
  virtual void contextMenuEvent(QContextMenuEvent* event);

private slots:

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::bookmarkChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Item changed event handler.
  ///\param [in] item: The changed item.
  //////////////////////////////////////////////////////////////////////////////
  virtual void bookmarkChanged(QListWidgetItem* item);

private:

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::loadBookmarks()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Load the bookmarks from the settings file.
  ///\returns true if successful or false otherwise.
  //////////////////////////////////////////////////////////////////////////////
  bool loadBookmarks();

  //////////////////////////////////////////////////////////////////////////////
  // BookmarkWidget::saveBookmarks()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Save the bookmarks to the settings file.
  ///\returns true if successful or false otherwise.
  //////////////////////////////////////////////////////////////////////////////
  bool saveBookmarks();
};

#endif // #ifndef __BOOKMARKWIDGET_H_INCLUDED__
///////////////////////////////// End of File //////////////////////////////////
