////////////////////////////////////////////////////////////////////////////////
// (c) 2013 Rolf Meyerhoff. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
///\file    documentmanager.h
///\ingroup bruo
///\brief   Document manager class definition.
///\author  Rolf Meyerhoff (badlantic@gmail.com)
///\version 1.0
/// This file is part of the bruo audio editor.
////////////////////////////////////////////////////////////////////////////////
///\par License:
/// This program is free software: you can redistribute it and/or modify it
/// under the terms of the GNU General Public License as published by the Free
/// Software Foundation, either version 2 of the License, or (at your option)
/// any later version.
///\par
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even  the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
/// more details.
///\par
/// You should have received a copy of the GNU General Public License along with
/// this program; see the file COPYING. If not, see http://www.gnu.org/licenses/
/// or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
/// Floor, Boston, MA 02110-1301, USA.
////////////////////////////////////////////////////////////////////////////////
#ifndef __DOCUMENTMANAGER_H_INCLUDED__
#define __DOCUMENTMANAGER_H_INCLUDED__

#include "document.h"

////////////////////////////////////////////////////////////////////////////////
///\class DocumentManager documentmanager.h
///\brief Document manager class.
/// This class will keep track of all open documents of this application.
////////////////////////////////////////////////////////////////////////////////
class DocumentManager :
  public QObject
{
  Q_OBJECT // Qt magic...

public:

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::DocumentManager()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Initialization constructor of this class.
  ///\param   [in] parent: Parent object for this class.
  ///\remarks Initializes this class.
  //////////////////////////////////////////////////////////////////////////////
  DocumentManager(QObject* parent = 0);

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::~DocumentManager()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Destructor of this class.
  //////////////////////////////////////////////////////////////////////////////
  virtual ~DocumentManager();

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::documents()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Accessor for the contained documents.
  ///\return  The list of open documents.
  ///\remarks This list may be empty of no document was loaded. If it's not
  ///         empty then the first document in the list is the active document.
  //////////////////////////////////////////////////////////////////////////////
  const QList<Document*>& documents() const;

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::newDocument()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Create a new empty document.
  ///\return  The newly created document.
  ///\remarks The new document is just appended to the document list so it's not
  ///         automatically activated.
  //////////////////////////////////////////////////////////////////////////////
  Document* newDocument();

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::closeDocument()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Close a specific document.
  ///\param   [in] doc: The document to close.
  ///\return  Returns true if the document was closed successful. If the return
  ///         value is false then the user has aborted the close.
  ///\remarks The document will be deleted and removed from the document list.
  ///         If the document was the active one then the next in the list will
  ///         be activated.
  //////////////////////////////////////////////////////////////////////////////
  bool closeDocument(Document* doc);

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::closeAllDocuments()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Close all documents.
  ///\return  Returns true if all documents were closed successful. If the
  ///         return value is false then the user has aborted the close.
  ///\remarks The documents will all be deleted and removed from the document
  ///         list.
  //////////////////////////////////////////////////////////////////////////////
  bool closeAllDocuments();

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::activeDocument()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Accessor for the currently active document.
  ///\return  The currently active document.
  ///\remarks The return value may be null if the document list is empty.
  //////////////////////////////////////////////////////////////////////////////
  Document* activeDocument();

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::activeDocument()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Accessor for the currently active document, const version.
  ///\return  The currently active document.
  ///\remarks The return value may be null if the document list is empty.
  //////////////////////////////////////////////////////////////////////////////
  const Document* activeDocument() const;

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::setActiveDocument()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Sets the new currently active document.
  ///\param [in] doc: The new active document.
  //////////////////////////////////////////////////////////////////////////////
  void setActiveDocument(Document* doc);

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::setActiveDocument()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Sets the new currently active document.
  ///\param [in] index: The index of the new active document.
  //////////////////////////////////////////////////////////////////////////////
  void setActiveDocument(int index);

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::canPaste()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Check if the clipboard content is an audio file.
  ///\param   [in] needDocument: Check for active document?
  ///\return  true if the contents of the clipboard can be pasted.
  ///\remarks Usually only uncompressed PCM wave data can be pasted.
  //////////////////////////////////////////////////////////////////////////////
  bool canPaste(bool needDocument) const;

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::emitDocumentCreated()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Fire a documentCreated event.
  ///\param The newly created document.
  //////////////////////////////////////////////////////////////////////////////
  void emitDocumentCreated(Document* doc);

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::emitActiveDocumentChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Fire a activeDocumentChanged event.
  //////////////////////////////////////////////////////////////////////////////
  void emitActiveDocumentChanged();

signals:

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::documentCreated()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   This signal is emitted when a new empty document was created.
  ///\remarks The handler for this signal is the perfect place to attach all
  ///         needed events to a document.
  //////////////////////////////////////////////////////////////////////////////
  void documentCreated(Document* doc);

  //////////////////////////////////////////////////////////////////////////////
  // DocumentManager::activeDocumentChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief This signal is emitted when another document was made active.
  //////////////////////////////////////////////////////////////////////////////
  void activeDocumentChanged();

private:

  //////////////////////////////////////////////////////////////////////////////
  // Member:
  QList<Document*> m_documents; ///> The list of documents.
};

#endif // #ifndef __DOCUMENTMANAGER_H_INCLUDED__
///////////////////////////////// End of File //////////////////////////////////
