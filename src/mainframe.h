////////////////////////////////////////////////////////////////////////////////
// (c) 2013 Rolf Meyerhoff. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
///\file    mainframe.h
///\ingroup bruo
///\brief   Main window class definition.
///\author  Rolf Meyerhoff (badlantic@gmail.com)
///\version 1.0
/// This file is part of the bruo audio editor.
////////////////////////////////////////////////////////////////////////////////
///\par License:
/// This program is free software: you can redistribute it and/or modify it
/// under the terms of the GNU General Public License as published by the Free
/// Software Foundation, either version 2 of the License, or (at your option)
/// any later version.
///\par
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even  the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
/// more details.
///\par
/// You should have received a copy of the GNU General Public License along with
/// this program; see the file COPYING. If not, see http://www.gnu.org/licenses/
/// or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
/// Floor, Boston, MA 02110-1301, USA.
////////////////////////////////////////////////////////////////////////////////
#ifndef __MAINFRAME_H_INCLUDED__
#define __MAINFRAME_H_INCLUDED__

#include <QtGui>
#include <QtWidgets>
#include "bruo.h"
#include "document.h"
#include "documentmanager.h"

////////////////////////////////////////////////////////////////////////////////
///\class MainFrame mainframe.h
///\brief Main window class.
/// This is the main widget of the application. It holds the menu, status bar,
/// and all the views.
////////////////////////////////////////////////////////////////////////////////
class MainFrame :
  public QMainWindow
{
  Q_OBJECT // Qt magic...

public:
  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::MainFrame()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Initialization constructor of this window.
  ///\param   [in] parent: Parent window for this window.
  ///\remarks Basically initializes the entire gui.
  //////////////////////////////////////////////////////////////////////////////
  MainFrame(QWidget* parent = 0);

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::~MainFrame()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Destructor of this window.
  ///\remarks Choose! Choose the form of the Destructor!
  //////////////////////////////////////////////////////////////////////////////
  ~MainFrame();

protected:
  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::closeEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the window close event.
  ///\param   [in] e: Description of the event.
  ///\remarks To allow the window to close, call e->accept().
  //////////////////////////////////////////////////////////////////////////////
  void closeEvent(QCloseEvent* e);

private slots:
  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::exitApplication()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the Exit-Application signal.
  ///\remarks Closes the window and quits the application.
  //////////////////////////////////////////////////////////////////////////////
  void exitApplication();

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::about()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the Help->About signal.
  ///\remarks Shows an about box with informations about this application.
  //////////////////////////////////////////////////////////////////////////////
  void about();

  void activeDocumentChanged();
  void documentCreated(Document* doc);
  void newDocument();
  void newFromClipboard();
  void openDocument();
  void openRecentFile();
  void showMoreRecentFiles();
  void clearRecentFiles();
  void saveDocument();
  void saveDocumentAs();
  void saveAllDocuments();
  void closeDocument();
  void closeAllDocuments();
  void printStats();
  void printPreview();

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::toggleToolbarVisibility()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the toolbar visibillity action signals.
  ///\remarks This one is called when one of the toolbar visibillity actions was
  ///         triggered. Updates the corresponding toolbar visibillity.
  //////////////////////////////////////////////////////////////////////////////
  void toggleToolbarVisibility();


  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::toolBarVisibilityChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the toolbar visibillity changed signal.
  ///\param   [in] visible: New visibillity state of the toolbar.
  ///\remarks This one is called when a toolbar's visibillity was changed either
  ///         by it's context menu or by loading a new state. Updates the
  ///         corresponding visibillity actions.
  //////////////////////////////////////////////////////////////////////////////
  void toolBarVisibilityChanged(bool visible);

private:

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::addRecentFile()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Add a new entry to the recent file list.
  ///\param   [in] fileName: New file to add.
  ///\remarks This will call 'updateRecentFiles()' to update the UI.
  //////////////////////////////////////////////////////////////////////////////
  void addRecentFile(const QString& fileName);

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::updateRecentFiles()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Update the 'recent files' related actions (and thus the menu).
  //////////////////////////////////////////////////////////////////////////////
  void updateRecentFiles();

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::createActions()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Internal helper to create the internal application actions.
  //////////////////////////////////////////////////////////////////////////////
  void createActions();

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::createMainMenu()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Internal helper to create the main menu of the application window.
  //////////////////////////////////////////////////////////////////////////////
  void createMainMenu();

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::createToolbars()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Internal helper to create the toolbars of the application.
  //////////////////////////////////////////////////////////////////////////////
  void createToolbars();

  //////////////////////////////////////////////////////////////////////////////
  // MainFrame::createStatusBar()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief Internal helper to create the status bar of the application window.
  //////////////////////////////////////////////////////////////////////////////
  void createStatusBar();

  //////////////////////////////////////////////////////////////////////////////
  // Member:
  QHash<QString, QAction*>  m_actionMap;   ///> All actions.
  QHash<QString, QToolBar*> m_toolBarMap;  ///> All toolbars.
  QStringList               m_recentFiles; ///> The recently used files.
  DocumentManager*          m_docManager;  ///> The document manager.
  QWidget*                  m_waveView;    ///> The main edit area.
};

#endif // __MAINFRAME_H_INCLUDED__
///////////////////////////////// End of File //////////////////////////////////
