////////////////////////////////////////////////////////////////////////////////
// (c) 2013 Rolf Meyerhoff. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
///\file    appundocommand.cpp
///\ingroup bruo
///\brief   Base class for all undo/redo commands.
///\author  Rolf Meyerhoff (badlantic@gmail.com)
///\version 1.0
/// This file is part of the bruo audio editor.
////////////////////////////////////////////////////////////////////////////////
///\par License:
/// This program is free software: you can redistribute it and/or modify it
/// under the terms of the GNU General Public License as published by the Free
/// Software Foundation, either version 2 of the License, or (at your option)
/// any later version.
///\par
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even  the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
/// more details.
///\par
/// You should have received a copy of the GNU General Public License along with
/// this program; see the file COPYING. If not, see http://www.gnu.org/licenses/
/// or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
/// Floor, Boston, MA 02110-1301, USA.
////////////////////////////////////////////////////////////////////////////////
#include "appundocommand.h"

////////////////////////////////////////////////////////////////////////////////
// AppUndoCommand::AppUndoCommand()
////////////////////////////////////////////////////////////////////////////////
///\brief Initialization constructor of this class.
///\param [in] doc:    The target document.
///\param [in] parent: Parent undo item.
////////////////////////////////////////////////////////////////////////////////
AppUndoCommand::AppUndoCommand(Document* doc, QUndoCommand* parent) :
  QUndoCommand(parent),
  m_doc(doc)
{
  // Nothing to do here.
}

////////////////////////////////////////////////////////////////////////////////
// AppUndoCommand::~AppUndoCommand()
////////////////////////////////////////////////////////////////////////////////
///\brief Destructor of this class.
////////////////////////////////////////////////////////////////////////////////
AppUndoCommand::~AppUndoCommand()
{
  // Nothing to do here.
}

////////////////////////////////////////////////////////////////////////////////
// AppUndoCommand::newCommandID()
////////////////////////////////////////////////////////////////////////////////
///\brief  Helper function to generate a new ID for derived commands.
///\return Returns a new unique value to use for the id() property.
////////////////////////////////////////////////////////////////////////////////
int AppUndoCommand::newCommandID()
{
  // This not thread save but this is good enough here.
  static int lastID = 0;
  return ++lastID;
}

////////////////////////////////////////////////////////////////////////////////
// AppUndoCommand::document()
////////////////////////////////////////////////////////////////////////////////
///\brief  Accessor for the document property.
///\return Returns the current document that we are working on.
////////////////////////////////////////////////////////////////////////////////
Document* AppUndoCommand::document()
{
  // Return our document:
  return m_doc;
}

////////////////////////////////////////////////////////////////////////////////
// AppUndoCommand::document()
////////////////////////////////////////////////////////////////////////////////
///\brief  Accessor for the document property, const version.
///\return Returns the current document that we are working on.
////////////////////////////////////////////////////////////////////////////////
const Document* AppUndoCommand::document() const
{
  // Return our document:
  return m_doc;
}

///////////////////////////////// End of File //////////////////////////////////

